name: Continuous Integration and Deployment

# This workflow runs on pushes to any branch and on any pull request.
on:
  push:
  pull_request:

jobs:
  lint_test:
    name: Run Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # This job now runs on every push and pull request for testing purposes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          # This line ensures the image is ONLY pushed on a merge to the main branch
          push: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
          tags: himanshu5403/Youtube-Cowatch:latest
          build-args: |
            MONGODB_URI=${{ secrets.MONGODB_URI }}

  deploy:
    name: Deploy to Production
    # The deploy job now depends on both linting and building successfully
    needs: [lint_test, build_and_push]
    # This condition correctly ensures deployment only happens on a push to main
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Pull the latest image from Docker Hub
            docker pull himanshu5403/Youtube-Cowatch:latest
            # Stop and remove the old container if it exists
            docker stop Youtube-Cowatch || true
            docker rm Youtube-Cowatch || true
            # Run the new container
            docker run -d --rm --name Youtube-Cowatch -p 3000:3000 \
              -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
              himanshu5403/Youtube-Cowatch:latest

